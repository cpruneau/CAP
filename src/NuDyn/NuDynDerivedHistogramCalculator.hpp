/* **********************************************************************
 * Copyright (C) 2019-2022, Claude Pruneau, Victor Gonzalez, Sumit Basu
 * All rights reserved.
 *
 * Based on the ROOT package and environment
 *
 * For the licensing terms see LICENSE.
 *
 * Author: Claude Pruneau,   04/01/2022
 *
 * *********************************************************************/
#ifndef CAP__NuDynDerivedHistogramCalculator
#define CAP__NuDynDerivedHistogramCalculator
#include "DerivedHistogramCalculator.hpp"
#include "NuDynHistos.hpp"
#include "NuDynDerivedHistos.hpp"

//!
//!This task computes the cumulants and nudyn values of particle multiplicities based on moments of these multiplicities  previously
//!determined with a NuDynAnalyzer task.  Event and particle filters, histogram names, must match those
//!generated by the NuDynAnalyzer task.
//!
class NuDynDerivedHistogramCalculator : public DerivedHistogramCalculator
{
public:
  
  //!
  //! Detailed CTOR
  //!
  //! @param _name Name given to task instance
  //! @param _configuration Configuration used to run this task
  //! @param _eventFilters Array of event filters to be used by this task
  //! @param _particleFilters Array of particle filters to be used by this task
  //! @param _reportLevel Message log level to be used by this task.
  //!
  NuDynDerivedHistogramCalculator(const TString &          _name,
                                  Configuration &          _configuration,
                                  vector<EventFilter*>   & _eventFilters,
                                  vector<ParticleFilter*>& _particleFilters,
                                  LogLevel                 _selectedLevel=Info);
  //!
  //! DTOR
  //!
  virtual ~NuDynDerivedHistogramCalculator() {}
  
  //!
  //! Sets the default  values of the configuration parameters used by this task
  //!
  virtual void setDefaultConfiguration();

  //!
  //! Executes this task based on the configuration and class variable specified at construction
  //!
  virtual void execute();
  
  //!
  //! Creates the histograms  filled by this task at execution
  //!
  virtual void createHistograms();

  //!
  //! Loads the histograms retquired by this task at execution
  //!
  virtual void loadHistograms(TFile * inputFile);
  
protected:
  
  ClassDef(NuDynDerivedHistogramCalculator,0)
};


#endif
